#include <emmintrin.h>
#include <immintrin.h>
#include <intrin.h>
#include <iostream>


#define N 4
#define VAL 50
               


static int* getRandArr1()
{
    auto res = new int[N*N];
    for (int i = 0; i < N*N; ++i) {
        res[i] = rand() % (VAL * 2);
    }
    return res;
}


auto simd(int* a, int* b, int* c)
{
    for (int i = 0; i < N; i += 4)
    {
        for (int j = 0; j < N; j++)
        {
            __m128i c0 = { 0,0,0,0 };
            for (int k = 0; k < N; k++)
            {
                c0 = _mm_add_epi32(c0, _mm_mul_epi32(_mm_loadu_si32(a + i + k * N), _mm_loadu_si32(b + k + j * N)));
            }
            _mm_storeu_si32(c + i + j * N, c0);
        }
    }
}

auto scalar(int* a, int* b, int* c)
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            float cij = 0;
            for (int k = 0; k < N; k++)
            {
                cij += a[i + k * N] * b[k + j * N];
            }
            c[i + j * N] = cij;
        }
    }
}

int main()
{
    static auto a = getRandArr1();
    static auto b = getRandArr1();
    static auto c = new int[N * N];
    scalar(a, b, c);
    std::cout << a[0] << "." << a[1] << "." << a[2] << "." << a[3] << "." << std::endl;
    std::cout << b[0] << "." << b[4] << "." << b[8] << "." << b[12] << "." << std::endl;
    std::cout << c[0];

}
