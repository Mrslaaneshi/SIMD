static double* getRandArr()
{
    auto res = new double[N * N];
    for (int i = 0; i < N * N; ++i) {
        res[i] = rand() % (VAL * 2);
    }
    return res;
}

static auto a = getRandArr();
static auto b = getRandArr();
static auto c = new double[N * N];

void simd(double* a, double* b, double* c)
{
    for (int i = 0; i < N; i += 4)
    {
        for (int j = 0; j < N; j++)
        {
            __m256d c0 = { 0,0,0,0 };
            for (int k = 0; k < N; k++)
            {
                c0 = _mm256_add_pd(c0, _mm256_mul_pd(_mm256_loadu_pd(a + i + k * N), _mm256_loadu_pd(b + k + j * N)));
            }
            _mm256_storeu_pd(c + i + j * N, c0);
        }
    }
}

void scalar(double* a, double* b, double* c)
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            float cij = 0;
            for (int k = 0; k < N; k++)
            {
                cij += a[i + k * N] * b[k + j * N];
            }
            c[i + j * N] = cij;
        }
    }
}

